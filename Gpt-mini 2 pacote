# train_gpt_mini_2_multilingual_final.py
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
from datasets import load_dataset, concatenate_datasets
from transformers import PreTrainedModel, PretrainedConfig
import json
import os
from PIL import Image
import open_clip
import whisper
from dalle_pytorch import DALLE

# ==== Tokenizer simples Multilingue ====
class SimpleTokenizer:
    def __init__(self, vocab=None):
        if vocab:
            self.vocab = vocab
        else:
            self.vocab = {"[PAD]":0, "[UNK]":1, "[CLS]":2, "[SEP]":3, "[MASK]":4}
        self.vocab_size = len(self.vocab)
    
    def encode(self, text):
        return [self.vocab.get(tok, self.vocab["[UNK]"]) for tok in text.split()]
    
    def decode(self, ids):
        inv_vocab = {v:k for k,v in self.vocab.items()}
        return " ".join([inv_vocab.get(i,"[UNK]") for i in ids])

# ==== Transformer Block ====
class TransformerBlock(nn.Module):
    def __init__(self, embed_size, heads, ff_hidden):
        super().__init__()
        self.attn = nn.MultiheadAttention(embed_dim=embed_size, num_heads=heads, batch_first=True)
        self.norm1 = nn.LayerNorm(embed_size)
        self.ff = nn.Sequential(
            nn.Linear(embed_size, ff_hidden),
            nn.ReLU(),
            nn.Linear(ff_hidden, embed_size)
        )
        self.norm2 = nn.LayerNorm(embed_size)
    
    def forward(self, x):
        attn_out,_ = self.attn(x,x,x)
        x = self.norm1(x + attn_out)
        x = self.norm2(x + self.ff(x))
        return x

# ==== GPT-Mini 2 Config ====
class GPTMini2Config(PretrainedConfig):
    model_type = "gpt-mini-2"
    def __init__(self, vocab_size=32000, n_embd=512, n_layer=8, n_head=8, max_len=128, **kwargs):
        super().__init__(**kwargs)
        self.vocab_size = vocab_size
        self.n_embd = n_embd
        self.n_layer = n_layer
        self.n_head = n_head
        self.max_len = max_len

# ==== GPT-Mini 2 Modelo ====
class GPTMini2ForCausalLM(PreTrainedModel):
    config_class = GPTMini2Config

    def __init__(self, config):
        super().__init__(config)
        self.token_emb = nn.Embedding(config.vocab_size, config.n_embd)
        self.pos_emb = nn.Embedding(config.max_len, config.n_embd)
        self.layers = nn.ModuleList([TransformerBlock(config.n_embd, config.n_head, config.n_embd*4)
                                     for _ in range(config.n_layer)])
        self.ln_f = nn.LayerNorm(config.n_embd)
        self.head = nn.Linear(config.n_embd, config.vocab_size)

        # ==== Multimodalidade ====
        self.clip_model, _, self.clip_preprocess = open_clip.create_model_and_transforms('ViT-B-32', pretrained='laion2b_s32b_b82k')
        self.whisper_model = whisper.load_model("base")
        self.dalle_model = DALLE.load_model('path_to_dalle_model')  # ajustar path

    def forward(self, input_ids, image=None, audio=None):
        B,T = input_ids.shape
        pos = torch.arange(T, device=input_ids.device).unsqueeze(0)
        x = self.token_emb(input_ids) + self.pos_emb(pos)
        for layer in self.layers:
            x = layer(x)
        x = self.ln_f(x)

        if image:
            image_features = self.process_image(image)
            # Exemplo: x = x + image_features.unsqueeze(1)

        if audio:
            audio_text = self.transcribe_audio(audio)
            # Concatenar texto transcrito ao embeddings se desejar

        return self.head(x)

    # ==== FunÃ§Ãµes multimodais ====
    def process_image(self, image_path):
        image = Image.open(image_path).convert('RGB')
        image_tensor = self.clip_preprocess(image).unsqueeze(0)
        with torch.no_grad():
            features = self.clip_model.encode_image(image_tensor)
        return features

    def transcribe_audio(self, audio_path):
        result = self.whisper_model.transcribe(audio_path)
        return result['text']

    def generate_image(self, text_prompt):
        image_tensor = self.dalle_model.generate_images(text_prompt)
        image = Image.fromarray(image_tensor.numpy())
        return image

# ==== Carrega datasets multilÃ­ngues adicionais ====
def load_datasets_multilingual_extended(tokenizer, max_len=128):
    langs = ["pt","en","fr","es","de","it","ru","zh","ja","ko"]
    datasets = []

    for lang in langs:
        datasets.append(load_dataset("wikipedia", f"20220301.{lang}", split="train"))
    
    # OSCAR multilingue
    oscar_multi = load_dataset("oscar","unshuffled_deduplicated_multi", split="train")
    datasets.append(oscar_multi)

    # QA PT
    qa_pt = load_dataset("cais/mmlu-pt", split="train")
    datasets.append(qa_pt)

    # CÃ³digo Python
    code = load_dataset("bigcode/the-stack-dedup", data_dir="data/python", split="train")
    datasets.append(code)

    def tokenize_fn(examples):
        text_col = "text" if "text" in examples else list(examples.keys())[0]
        texts = examples[text_col]
        input_ids = [tokenizer.encode(t)[:max_len] for t in texts]
        return {"input_ids": input_ids}

    tokenized = [d.map(tokenize_fn, batched=True, remove_columns=d.column_names) for d in datasets]
    dataset = concatenate_datasets(tokenized)
    return dataset

# ==== Treino GPT-Mini 2 ====
def train():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    tokenizer = SimpleTokenizer()
    dataset = load_datasets_multilingual_extended(tokenizer)
    dataloader = DataLoader(dataset, batch_size=8, shuffle=True)

    config = GPTMini2Config(vocab_size=tokenizer.vocab_size)
    model = GPTMini2ForCausalLM(config).to(device)

    optimizer = torch.optim.AdamW(model.parameters(), lr=3e-4)
    criterion = nn.CrossEntropyLoss()

    for epoch in range(5):
        total_loss = 0
        for batch in dataloader:
            input_ids = torch.tensor(batch["input_ids"], dtype=torch.long).to(device)
            labels = input_ids.clone()

            outputs = model(input_ids)
            logits = outputs.view(-1, tokenizer.vocab_size)
            loss = criterion(logits, labels.view(-1))

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

        print(f"ðŸ“˜ Epoch {epoch+1} - Avg Loss: {total_loss/len(dataloader):.4f}")

    save_dir = "./GPT-Mini-2-Multilingual"
    os.makedirs(save_dir, exist_ok=True)
    model.save_pretrained(save_dir)
    tokenizer_path = os.path.join(save_dir, "tokenizer.json")
    with open(tokenizer_path, "w") as f:
        json.dump(tokenizer.vocab, f)

    print("âœ… GPT-Mini 2 treinado e salvo com multimodalidade em vÃ¡rias lÃ­nguas!")

if __name__ == "__main__":
    train()
